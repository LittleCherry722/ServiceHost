sbpm {
  db {
    #uri = "jdbc:mysql://localhost/sbpm_groupware?user=root"
    #jdbcDriver = "com.mysql.jdbc.Driver"
    #slickDriver = "scala.slick.driver.MySQLDriver"
    #uri = "jdbc:sqlite::memory:"
    uri = "jdbc:sqlite:sbpm.db"
    jdbcDriver = "org.sqlite.JDBC"
    slickDriver = "scala.slick.driver.SQLiteDriver"
    minPoolSize = 1
    maxPoolSize = 1
    poolAcquireIncrement = 1
    # startupAction = none -> use existing db
    # startupAction = create -> create schema on startup
    # startupAction = recreate -> drop and recreate schema
    # startupAction = create-debug -> create with inserting test data
    # startupAction = recreate-debug -> recreate with inserting test data
    startupAction = "recreate-debug"
  }
  frontend {
  	baseUrl = "sbpm"
  	indexFile = "index.html"
	baseDirectory = "../ProcessManagement/"
  }
  rest {
  	authentication = off
  }
}

spray.can.server {
  ssl-encryption = off
}

spray.client {
  # the maximum number of parallel connections that an HttpConduit
  # is allowed to establish to a host, must be greater than zero
  max-connections = 4

  # the maximum number of retries an HttpConduit will attempt before
  # giving up and returning an error
  max-retries = 5

  # if this setting is enabled, the HttpConduit will log warnings for
  # all illegal response headers coming back from a target server
  warn-on-illegal-headers = on
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  actor {
    debug {
      # enable DEBUG logging of actor lifecycle changes
      #lifecycle = on
      lifecycle = off
      # logs every message received by an actor
      receive = on
    }
    provider = "akka.remote.RemoteActorRefProvider"
  }
  remote {
    transport = "akka.remote.netty.NettyRemoteTransport"
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2552
      port = ${?AKKA_PORT}
    }
 }
}
